{"version":3,"sources":["utils/common.js","utils/api.js","services/http.js","services/backend.js","services/validation.js","components/country-selector/index.js","components/masked-input/index.js","components/payment-form/fields/index.js","components/payment-form/index.js","components/payment-form-skeleton/index.js","App.js","index.js"],"names":["isObject","item","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","setGetParams","url","params","u","URL","keys","forEach","searchParams","append","Http","defaultOptions","headers","Accept","isStatusSuccess","status","options","Promise","resolve","reject","handleError","mergedOptions","isFetchApiAvailable","fetch","fetchPolyfill","then","response","handleRequestSuccess","json","handleSuccess","catch","error","this","data","_status","type","message","reason","name","errorToSend","window","urlWithParams","request","method","constructor","httpClient","getInstance","getUserCountryCode","get","Authorization","getPaymentSystems","countryCode","sign_version","country_code","signature","secret","sortedParams","sort","reduce","obj","hasOwnProperty","result","entries","str","curr","md5","generateSignature","encodeURI","sign","expDateMask","cardNumberMask","CountrySelector","props","onUpdate","selected","useState","value","setValue","useMemo","countryList","getData","FormControl","fullWidth","InputLabel","Select","onChange","event","map","option","MenuItem","label","defaultProps","CustomMaskedInput","inputRef","mask","other","ref","inputElement","showMask","CardNumberInput","field","form","touched","errors","cardNumber","shrink","htmlFor","Input","inputProps","id","placeholderChar","inputComponent","render","msg","FormHelperText","CardExpDateInput","cardExpDate","validationSchema","yup","cardholderName","matches","required","transform","val","originalVal","replace","test","nCheck","bEven","n","String","cDigit","charAt","nDigit","parseInt","checkIfCardNumIsValid","split","expMonth","Number","checkIfMonthIsCorrect","today","Date","monthToday","getMonth","yearToday","getFullYear","toString","substr","expYear","checkIfDateIsPast","cardCVV","min","max","amount","currency","PaymentCardForm","userCountry","setUserCountry","paymentSystems","currencies","initialValues","paymentSystem","validateOnBlur","validateOnChange","onSubmit","values","setSubmitting","alert","JSON","stringify","handleChange","handleBlur","submitForm","isSubmitting","className","Grid","container","spacing","xs","sm","country","component","TextField","select","InputLabelProps","src","img_url","alt","Typography","color","e","slice","Alert","variant","severity","Button","disabled","PaymentFormSkeleton","Skeleton","animation","height","App","isLoading","setIsLoading","setPaymentSystems","useEffect","a","console","log","fetchAndSetCountryCode","getAndSetPaymentSystems","Card","LinearProgress","align","cc","codes","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c1c808a8.chunk.js","sourcesContent":["import md5 from 'md5';\n\nexport function isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function generateSignature(params, secret) {\n  if (!isObject(params)) {\n    return null;\n  }\n\n  let sortedParams = Object.keys(params)\n    .sort()\n    .reduce((obj, key) => {\n      if (params.hasOwnProperty(key)) {\n        obj[key] = params[key];\n        return obj;\n      }\n    }, {});\n\n  let result = Object.entries(sortedParams).reduce((str, curr) => {\n    str += curr[0] + '=' + curr[1];\n    return str;\n  }, '');\n\n  result += secret;\n\n  return md5(result);\n}\n","import { isObject } from './common';\n\nexport const setGetParams = (url, params) => {\n  if (!url) {\n    return null;\n  }\n\n  if (!isObject(params)) {\n    return null;\n  }\n\n  const u = new URL(url);\n  Object.keys(params).forEach((key) => u.searchParams.append(key, params[key]));\n  return u;\n};\n","import { fetch as fetchPolyfill } from 'whatwg-fetch';\nimport { setGetParams } from '../utils/api';\nimport { mergeDeep } from '../utils/common';\n\nclass Http {\n  static #instance = null;\n\n  defaultOptions = {\n    headers: {\n      Accept: 'application/json'\n    }\n  };\n\n  static getInstance() {\n    if (!Http.#instance) {\n      Http.#instance = new Http();\n      Http.#instance.constructor = null;\n    }\n\n    return Http.#instance;\n  }\n\n  request({ url, options }) {\n    return new Promise((resolve, reject) => {\n      if (!url) {\n        return this.handleError(reject, 'Error! No url was provided.');\n      }\n\n      const defaultOpt = { ...this.defaultOptions };\n      const mergedOptions = mergeDeep(defaultOpt, options);\n      let fetchFunc;\n\n      if (this.isFetchApiAvailable()) {\n        fetchFunc = fetch;\n      } else {\n        fetchFunc = fetchPolyfill;\n      }\n\n      fetchFunc(url, mergedOptions)\n        .then((response) => this.handleRequestSuccess(response, response.status))\n        .then((response) => response.json())\n        .then((response) => this.handleSuccess(resolve, response, response.status))\n        .catch((error) => this.handleError(reject, error));\n    });\n  }\n\n  handleRequestSuccess(response, status) {\n    if (this.isStatusSuccess(status)) {\n      return response;\n    }\n\n    throw response;\n  }\n\n  handleSuccess(resolve, data, status = 200) {\n    return resolve({ data, status });\n  }\n\n  handleError(reject, error = {}, _status = 500) {\n    const { type = 'error', message = 'Internal Server Error', status = _status, data = null } =\n      error.response || error;\n\n    let { reason = 'Request failed', name = 'Request failed' } = error.response || error;\n\n    let errorToSend = { ...data, status };\n\n    if (name === 'SyntaxError') {\n      reason = 'The response returned from the endpoint was probably not valid JSON';\n      errorToSend = { name, reason };\n    }\n\n    if (name === 'FetchError' || error.type === 'system') {\n      if (type === 'request-timeout') {\n        reason = 'Timed out in the call.';\n        name = 'Timeout';\n      } else {\n        reason =\n          'Failed to connect to the endpoint. This is likely connectivity issues with the endpoint';\n      }\n\n      errorToSend = {\n        name,\n        reason,\n        type,\n        message\n      };\n    }\n    reject({ status, error: errorToSend });\n  }\n\n  isStatusSuccess = (status) => status >= 200 && status < 300;\n\n  isFetchApiAvailable() {\n    return 'fetch' in window;\n  }\n\n  get(url, params, headers = {}) {\n    const urlWithParams = setGetParams(url, params);\n    return this.request({\n      url: urlWithParams,\n      options: {\n        method: 'GET',\n        headers: headers\n      }\n    });\n  }\n}\n\nexport const httpClient = Http.getInstance();\n","import { httpClient } from './http';\nimport { generateSignature } from '../utils/common';\n\nexport const getUserCountryCode = () => {\n  return httpClient.get('https://ipinfo.io', {}, { Authorization: 'Bearer 9236c16abaedb2' });\n};\n\nexport const getPaymentSystems = (countryCode) => {\n  const params = {\n    sign_version: 2,\n    key: 'c5fb24b34ae994141a0ecd83b09e7e68',\n    country_code: countryCode\n  };\n\n  const signature = generateSignature(params, '25246a1d4b1e01eff875ef68ec7cdd68');\n  if (!signature) {\n    return;\n  }\n\n  return httpClient.get(`/proxy.php?url=${encodeURI('https://api.paymentwall.com/api/payment-systems/')}`, {\n    ...params,\n    sign: signature\n  });\n};\n","export function checkIfCardNumIsValid(value) {\n  if (!value) {\n    return false;\n  }\n\n  // The Luhn Algorithm\n  let nCheck = 0,\n    bEven = false;\n\n  value = String(value);\n\n  for (var n = value.length - 1; n >= 0; n--) {\n    var cDigit = value.charAt(n),\n      nDigit = parseInt(cDigit, 10);\n\n    if (bEven && (nDigit *= 2) > 9) nDigit -= 9;\n\n    nCheck += nDigit;\n    bEven = !bEven;\n  }\n\n  return nCheck % 10 === 0;\n}\n\nexport const checkIfDateIsPast = (value) => {\n  if (!value) {\n    return false;\n  }\n\n  const today = new Date();\n  const monthToday = today.getMonth() + 1;\n  const yearToday = today.getFullYear().toString().substr(-2);\n\n  const [expMonth, expYear] = value.split('/');\n\n  if (Number(expYear) < Number(yearToday)) {\n    return false;\n  } else if (Number(expMonth) < monthToday && Number(expYear) <= Number(yearToday)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const checkIfMonthIsCorrect = (value) => {\n  if (!value) {\n    return false;\n  }\n\n  const [expMonth] = value.split('/');\n\n  if (Number(expMonth) > 12) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const expDateMask = [/\\d/, /\\d/, '/', /\\d/, /\\d/];\nexport const cardNumberMask = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  ' '\n];\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport countryList from 'react-select-country-list';\nimport { FormControl, InputLabel } from '@material-ui/core';\n\nconst CountrySelector = (props) => {\n  const { onUpdate, selected } = props;\n\n  const [value, setValue] = useState(selected);\n  const options = useMemo(() => countryList().getData(), []);\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    onUpdate(event.target.value);\n  };\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel>Choose country</InputLabel>\n      <Select value={value} onChange={handleChange}>\n        {options.map((option) => {\n          return (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    </FormControl>\n  );\n};\n\nCountrySelector.propTypes = {\n  onUpdate: PropTypes.func,\n  selected: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nCountrySelector.defaultProps = {\n  onUpdate: () => ({}),\n  selected: ''\n};\n\nexport default CountrySelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\n\nconst CustomMaskedInput = (props) => {\n  const { inputRef, mask, name, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      name={name}\n      ref={(ref) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask={mask}\n      showMask\n    />\n  );\n};\n\nCustomMaskedInput.propTypes = {\n  inputRef: PropTypes.func,\n  mask: PropTypes.array.isRequired,\n  name: PropTypes.string\n};\n\nCustomMaskedInput.defaultProps = {\n  inputRef: null,\n  mask: [],\n  name: ''\n};\n\nexport default CustomMaskedInput;\n","import React from 'react';\nimport { FormHelperText, Input, InputLabel } from '@material-ui/core';\nimport { cardNumberMask, expDateMask } from '../../../services/validation';\nimport CustomMaskedInput from '../../masked-input';\nimport { ErrorMessage } from 'formik';\n\nexport const CardNumberInput = ({ field, form: { touched, errors } }) => {\n  return (\n    <div>\n      <InputLabel error={errors.cardNumber && touched.cardNumber} shrink htmlFor=\"cardNumberInput\">\n        Card number\n      </InputLabel>\n      <Input\n        {...field}\n        error={errors.cardNumber && touched.cardNumber}\n        inputProps={{\n          id: 'cardNumberInput',\n          mask: cardNumberMask,\n          name: field.name,\n          placeholderChar: '\\u2000'\n        }}\n        inputComponent={CustomMaskedInput}\n      />\n      {errors.cardNumber && touched.cardNumber && (\n        <ErrorMessage\n          name=\"cardNumber\"\n          render={(msg) => <FormHelperText error>{msg}</FormHelperText>}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const CardExpDateInput = ({ field, form: { touched, errors } }) => {\n  return (\n    <div>\n      <InputLabel\n        error={errors.cardExpDate && touched.cardExpDate}\n        shrink\n        htmlFor=\"cardExpDateInput\"\n      >\n        Card exp. date\n      </InputLabel>\n      <Input\n        {...field}\n        error={errors.cardExpDate && touched.cardExpDate}\n        inputProps={{\n          id: 'cardExpDateInput',\n          mask: expDateMask,\n          name: field.name\n        }}\n        mask={expDateMask}\n        inputComponent={CustomMaskedInput}\n      />\n      {errors.cardExpDate && touched.cardExpDate && (\n        <ErrorMessage\n          name=\"cardExpDate\"\n          render={(msg) => <FormHelperText error>{msg}</FormHelperText>}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Field, Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from 'formik-material-ui';\nimport {\n  checkIfCardNumIsValid,\n  checkIfDateIsPast,\n  checkIfMonthIsCorrect\n} from '../../services/validation';\nimport Alert from '@material-ui/lab/Alert';\nimport { Grid, Typography, MenuItem } from '@material-ui/core';\nimport CountrySelector from '../country-selector';\nimport { CardNumberInput, CardExpDateInput } from './fields';\n\nconst validationSchema = yup.object({\n  cardholderName: yup\n    .string()\n    .matches(/^[aA-zZ\\s]+$/, 'Only alphabets are allowed for this field ')\n    .required('Cardholder name is required'),\n  cardNumber: yup\n    .string()\n    .transform((val, originalVal) => val.replace(/\\s/g, ''))\n    .required('Card number is required')\n    .test('luhn-test', 'Invalid card number', function (value) {\n      return checkIfCardNumIsValid(value);\n    }),\n  cardExpDate: yup\n    .string()\n    .test('month-test', 'Invalid month', function (value) {\n      return checkIfMonthIsCorrect(value);\n    })\n    .test('past-date-test', \"Exp.date can't be earlier than today\", function (value) {\n      return checkIfDateIsPast(value);\n    })\n    .required('Card exp. date is required'),\n  cardCVV: yup.string().required('CVV code is required').min(3).max(3),\n  amount: yup.string().required('Amount is required'),\n  currency: yup.string().required('Currency is required')\n});\n\nconst PaymentCardForm = (props) => {\n  const { userCountry, setUserCountry, paymentSystems, currencies } = props;\n\n  return (\n    <Formik\n      initialValues={{\n        cardholderName: '',\n        cardNumber: '',\n        amount: '5',\n        cardExpDate: '',\n        cardCVV: '',\n        currency: 'USD',\n        paymentSystem: paymentSystems[0]?.id\n      }}\n      validateOnBlur\n      validateOnChange\n      validationSchema={validationSchema}\n      onSubmit={(values, { setSubmitting }) => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }}\n    >\n      {({ values, handleChange, handleBlur, submitForm, isSubmitting, touched, errors }) => (\n        <Form>\n          <div className=\"form-content\">\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <div className=\"widget-country-block\">\n                  {userCountry && (\n                    <CountrySelector\n                      selected={userCountry}\n                      onUpdate={(country) => {\n                        setUserCountry(country);\n                      }}\n                    />\n                  )}\n                </div>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <div className=\"widget-payment-systems-block\">\n                  <Field\n                    fullWidth\n                    label=\"Choose payment system\"\n                    component={TextField}\n                    type=\"text\"\n                    name=\"paymentSystem\"\n                    select\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                  >\n                    {paymentSystems.length > 0 ? (\n                      paymentSystems.map((option) => {\n                        return (\n                          <MenuItem\n                            key={option.id}\n                            value={option.id}\n                            className=\"select-system-menu-item\"\n                          >\n                            <img src={option.img_url} alt={`${option.name}`} />\n                            <Typography>{option.name}</Typography>\n                          </MenuItem>\n                        );\n                      })\n                    ) : (\n                      <Typography>No options provided</Typography>\n                    )}\n                  </Field>\n                </div>\n              </Grid>\n              <Grid item xs={12}>\n                <div className=\"widget-amount-block\">\n                  <Typography>Enter amount:</Typography>\n                  <div className=\"widget-amount-fields\">\n                    <Field\n                      inputProps={{ className: 'text-center' }}\n                      component={TextField}\n                      type=\"number\"\n                      id=\"amount\"\n                      name=\"amount\"\n                      color=\"primary\"\n                    />\n                    <Field\n                      component={TextField}\n                      type=\"text\"\n                      name=\"currency\"\n                      select\n                      InputLabelProps={{\n                        shrink: true\n                      }}\n                    >\n                      {currencies.map((option) => (\n                        <MenuItem key={option} value={option}>\n                          {option}\n                        </MenuItem>\n                      ))}\n                    </Field>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Field\n                  fullWidth\n                  component={TextField}\n                  type=\"text\"\n                  id=\"cardholderName\"\n                  label=\"Cardholder name\"\n                  name=\"cardholderName\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Field\n                  fullWidth\n                  type=\"number\"\n                  id=\"cardNumber\"\n                  label=\"Card number\"\n                  name=\"cardNumber\"\n                  component={CardNumberInput}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Field\n                  fullWidth\n                  type=\"number\"\n                  id=\"cardExpDate\"\n                  name=\"cardExpDate\"\n                  component={CardExpDateInput}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Field\n                  component={TextField}\n                  type=\"password\"\n                  id=\"cardCVV\"\n                  label=\"CVV\"\n                  name=\"cardCVV\"\n                  onChange={(e) => {\n                    let val = e.target.value;\n\n                    if (val.length > 3) {\n                      val = val.slice(0, 3);\n                    }\n                    e.target.value = val;\n                    handleChange(e);\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            {Object.keys(errors).length === 0 && Object.keys(touched).length > 0 && (\n              <Alert variant=\"outlined\" severity=\"success\" className=\"alert-message\">\n                All fields were filled correctly!\n              </Alert>\n            )}\n          </div>\n          <Button\n            disabled={Object.keys(errors).length > 0 || values.amount === '0'}\n            color=\"primary\"\n            variant=\"contained\"\n            fullWidth\n            type=\"submit\"\n          >\n            {`Pay ${values.amount || 0} ${values.currency}`}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default PaymentCardForm;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nconst PaymentFormSkeleton = () => {\n  return (\n    <>\n      <div className=\"form-content skeleton\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n          </Grid>\n          <Grid item xs={12}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={65} />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n          </Grid>\n          <Grid item xs={6}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n          </Grid>\n          <Grid item xs={6}>\n            <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n          </Grid>\n        </Grid>\n      </div>\n      <Skeleton variant=\"rect\" animation=\"wave\" height={48} />\n    </>\n  );\n};\n\nexport default PaymentFormSkeleton;\n","import React, { useEffect, useState } from 'react';\nimport { getUserCountryCode, getPaymentSystems } from './services/backend';\nimport { Card, Typography, LinearProgress } from '@material-ui/core';\nimport PaymentCardForm from './components/payment-form/index';\nimport PaymentFormSkeleton from './components/payment-form-skeleton';\nimport cc from 'currency-codes';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [userCountry, setUserCountry] = useState(null);\n  const [paymentSystems, setPaymentSystems] = useState([]);\n\n  useEffect(() => {\n    async function fetchAndSetCountryCode() {\n      setIsLoading(true);\n      try {\n        const response = await getUserCountryCode();\n        if (response.status === 200) {\n          const {\n            data: { country }\n          } = response;\n          setUserCountry(country);\n        }\n      } catch (e) {\n        console.log(e.error);\n      }\n      setIsLoading(false);\n    }\n\n    fetchAndSetCountryCode();\n  }, []);\n\n  useEffect(() => {\n    async function getAndSetPaymentSystems() {\n      if (userCountry) {\n        setIsLoading(true);\n        try {\n          const response = await getPaymentSystems(userCountry);\n          if (response.status === 200) {\n            const { data: paymentSystems } = response;\n            setPaymentSystems(paymentSystems);\n          }\n        } catch (e) {\n          console.log(e.error);\n        }\n        setIsLoading(false);\n      }\n    }\n\n    getAndSetPaymentSystems();\n  }, [userCountry]);\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">Payment widget</header>\n      <main className=\"app-content\">\n        <Card className=\"widget-container\">\n          <div className=\"widget-loader-block\">{isLoading && <LinearProgress />}</div>\n          <div className=\"widget\">\n            <Typography align=\"center\" variant=\"h5\" color=\"primary\" className=\"widget-title\">\n              Payment widget\n            </Typography>\n\n            {isLoading ? (\n              <PaymentFormSkeleton />\n            ) : (\n              <PaymentCardForm\n                currencies={cc.codes()}\n                userCountry={userCountry}\n                setUserCountry={setUserCountry}\n                paymentSystems={paymentSystems}\n              />\n            )}\n          </div>\n        </Card>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport 'core-js/es/map';\nimport 'core-js/es/set';\nimport 'core-js/es/object/assign';\nimport 'raf/polyfill';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/scss/main.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}